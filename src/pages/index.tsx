import Head from "next/head";
import { useState } from "react";
import { FormProvider, useFieldArray, useForm } from "react-hook-form";
import { FormFieldInput } from "~/components/form-field-input";
import { api } from "~/utils/api";

interface FormFields {
  creditCardNumbers: { value: string }[];
}
const defaultValues: FormFields = {
  creditCardNumbers: [{ value: "" }],
};

export default function Home() {
  const { mutateAsync: testMany, data } =
    api.creditCard.checkManyCreditCardNumbers.useMutation();
  const [isDirty, setIsDirty] = useState(true);

  const useFormMethods = useForm<FormFields>({
    defaultValues,
  });
  const {
    handleSubmit,
    control,
    formState: { isSubmitting },
    reset,
  } = useFormMethods;
  const { fields, append, remove } = useFieldArray({
    control,
    name: "creditCardNumbers",
  });

  const onSubmit = async (values: FormFields) => {
    await testMany(
      {
        creditCardNumbers: values.creditCardNumbers.map(({ value }) => value),
      },
      {
        onSuccess: () => {
          setIsDirty(false);
          reset(undefined, { keepValues: true, keepTouched: false });
        },
        onError: () => {
          reset(undefined, { keepValues: true });
        },
      }
    );
  };
  return (
    <>
      <Head>
        <title>Credit Card Number Validator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Super Official Credit Card Validator</h1>
        <p>
          Hello, please give us your credit card numbers so we can tell if they
          are potentially* valid
        </p>
        <p>
          Don{`'`}t worry, you can probably trust us. We do all the checking on
          our super secure server and don{`'`}t secretely steal your CC numbers
          so we can go buy more snacks and caffiene.
        </p>
        <FormProvider {...useFormMethods}>
          <form onSubmit={handleSubmit(onSubmit)}>
            {fields.map((item, index) => (
              <div key={item.id}>
                <FormFieldInput
                  disabled={isSubmitting}
                  control={control}
                  name={`creditCardNumbers.${index}.value`}
                  label="Credit Card Number"
                  defaultValue={item.value}
                  onChange={() => {
                    setIsDirty(true);
                  }}
                  // TODO: fix validation from immediately firing on new value after submitting form.
                  rules={{
                    required: "Required",
                    validate: (value) => {
                      const cleanedValue = (value as string).replace(/\D/g, "");
                      if (cleanedValue.length < 12) {
                        return "Number must be at least 12 digits long";
                      }
                      if (cleanedValue.length > 19) {
                        return "Number must be less than 19 digits long";
                      }
                      return true;
                    },
                  }}
                />
                {!isDirty && !!data && (
                  <p>{data.results[index]?.isValid ? "valid" : "invalid"}</p>
                )}
                <button type="button" onClick={() => remove(index)}>
                  Remove
                </button>
              </div>
            ))}
            <button
              type="button"
              onClick={() => {
                append({ value: "" });
              }}
            >
              Add field
            </button>
            {/* TODO: look into better handling of strings/masking of format */}
            <button type="submit">Check</button>
            <button type="button" onClick={() => reset()}>
              Reset
            </button>
          </form>
        </FormProvider>
      </main>
    </>
  );
}
